use std::boxed::Box;
use symbol::pos::{Location, spanned2, spanned};

use crate::lexer::token::{Token, Delimiter};
use crate::cst::*;
use super::error::ParserError;


#[LALR]
grammar(errors: &mut Vec<ParserError>);

extern {
    type Error = &'static str;
    type Location = Location;

    enum Token {
        ident => Token::Identifier(<String>),
        doc   => Token::DocComment(<String>),

        // Literals
        stringl => Token::StringLiteral(<String>),
        booll   => Token::BoolLiteral(<bool>),
        charl   => Token::CharLiteral(<char>),
        intl    => Token::IntLiteral(<i32>),
        fltl    => Token::FloatLiteral(<f32>),
        "self"  => Token::SelfLit,

        "plus"   => Token::Arith(ArithOp::Add),
        "minus"  => Token::Arith(ArithOp::Sub),
        "mult"   => Token::Arith(ArithOp::Mult),
        "div"    => Token::Arith(ArithOp::Div),
        "pow"    => Token::Arith(ArithOp::Pow),
        "mod"    => Token::Arith(ArithOp::Mod),
        "lshift" => Token::Arith(ArithOp::LShift),
        "rshift" => Token::Arith(ArithOp::RShift),

        "not" => Token::Logic(LogicOp::Not),
        "and" => Token::Logic(LogicOp::And),
        "or"  => Token::Logic(LogicOp::Or),
        "=="  => Token::Logic(LogicOp::DoubleEquals),
        "!="  => Token::Logic(LogicOp::NotEquals),
        "<"   => Token::Logic(LogicOp::LessThan),
        "<="  => Token::Logic(LogicOp::LessEquals),
        ">"   => Token::Logic(LogicOp::GreaterThan),
        ">="  => Token::Logic(LogicOp::GreaterEquals),

        // Types
        tyvar => Token::TypeVar(<String>),
        "data"   => Token::Data,
        "type"   => Token::Type,
        "new"    => Token::New,
        "struct" => Token::Struct,
        "impl"   => Token::Impl,
        "forall" => Token::Forall,

        // Control-flow
        "if"       => Token::If,
        "else"     => Token::Else,
        "unless"   => Token::Unless,
        "while"    => Token::While,
        "until"    => Token::Until,
        "for"      => Token::For,
        "in"       => Token::In,
        "loop"     => Token::Loop,
        "break"    => Token::Break,
        "continue" => Token::Continue,
        "return"   => Token::Return,

        // Extras
        "with"  => Token::With,
        "match" => Token::Match,
        "let"   => Token::Let,
        "mut"   => Token::Mut,

        // Punctuation
        ":"  => Token::Colon,
        "::" => Token::DoubleColon,
        ";"  => Token::SemiColon,
        "."  => Token::Dot,
        ","  => Token::Comma,
        "?"  => Token::Question,
        "->" => Token::RArrow,
        "=>" => Token::FatRArrow,
        "~>" => Token::SqdRArrow,
        "<-" => Token::LArrow,
        "="  => Token::Equals,
        "|"  => Token::Pipe,

        "{" => Token::Delim(Delimiter::LBrace),
        "[" => Token::Delim(Delimiter::LBracket),
        "(" => Token::Delim(Delimiter::LParen),
        "}" => Token::Delim(Delimiter::RBrace),
        "]" => Token::Delim(Delimiter::RBracket),
        ")" => Token::Delim(Delimiter::RParen),
    }
}

either<e1, e2> = { e1, e2 };

comma<e>: Vec<e> = {
    <es: (<e> ",")*> <e_new:e> => {
        let mut es = es;
        es.push(e_new);

        es
    },
};

many<e>: Vec<e> = {
    <es:many<e>> <e_new:e> => {
        let mut es = es;
        es.push(e_new);

        es
    },
     => vec![],
};

located<e>: Located<e> = {
    <l: @L> <e: e> <r: @R> => spanned2(l, r, e),
};

//
// Modules
//

pub module: Module<String> = {
    many<def> => Module{ definitions: <> }
};

//
// Top-level definitions
//

pub def = located<defNode>;

defNode: DefNode<String> = {
    func => DefNode::Func(<>),
    sign => DefNode::Sign(<>),
};

func: Func<String> = {
    <name:identifier> "(" <args:comma<identifier>?> ")" "=" <body:block> => {
        Func{
            name,
            args: args.unwrap_or_else(Vec::new),
            body,
        }
    },
    <name: identifier> "=" <body: block> => {
        Func{
            name,
            args: vec![],
            body,
        }
    }
};

sign: Sign<String> = {
    <doc: doc?> <name: identifier> ":" <type_: type_> => Sign{name, type_, doc},
};

//
// Types
//

pub type_: Type<String> = { located<forall>, located<unconstraint> };

forall: TypeNode<String> = {
    located<forall_node> => TypeNode::Forall(<>)
};

forall_node: ForallNode<String> = {
    "forall" <vars: many<type_var>> <c:constraints?> "." <base: located<unconstraint>> => {
        ForallNode{
            vars,
            base: box base,
            constraint: c
        }
    },
};

constraints: Constraint<String> = {
    "with" <c:located<constraint>> => c,
};

constraint: ConstraintNode<String> = {
    single_constraint,
    "(" <comma<located<single_constraint>>> ")" => ConstraintNode::Parens(<>),
};

single_constraint: ConstraintNode<String> = {
    <identifier> "[" <comma<located<base_type>>> "]" => ConstraintNode::Constraint(<>),
};

unconstraint = either<base_type, method>;

base_type: TypeNode<String> = {
    arrow,
    type_term,
    "->" <r:located<base_type>> => TypeNode::Arrow(None, box <>),
};

arrow: TypeNode<String> = {
    <p:located<type_term>> "->" <r: located<base_type>> => TypeNode::Arrow(Some(box p), box r),
};

method: TypeNode<String> = {
    <l:@R> <rec:located<type_term>> "~>" <ret:located<either<arrow, type_term>>> <r:@R> =>
        TypeNode::Method(box spanned2(l, r, TypeNode::Arrow(Some(box rec), box ret))),
};

type_term: TypeNode<String> = {
    identifier => TypeNode::Term(<>),
    type_var => TypeNode::Var(<>),
    <typ: located<type_term>> "[" <args: comma<located<base_type>>> "]" => TypeNode::App(box typ, args),
    <l:@L> "(" ")" <r:@R> => TypeNode::Term(spanned2(l, r, "unit".to_owned())),
    "(" <located<unconstraint>> ")" => TypeNode::Parens(box <>)
};

type_var: Located<String> = { located<tyvar> };

//
// Statements
//

pub stmt: Stmt<String> = {
    located<assign_stmt>,
    located<while_stmt>,
    located<for_stmt>,
    located<let_stmt>,
    located<expr_stmt>,
};

#[inline]
assign_stmt: StmtNode<String> = {
    <l:@L> <to:located<named>> "=" <expr:expr> ";" <r:@R> => {
        StmtNode::Assign(spanned2(l, r, AssignNode{
            to,
            expr
        }))
    }
};

#[inline]
let_stmt: StmtNode<String> = {
    <l:@L> "let" <m:"mut"?> <ident:identifier> <typ:(":" <type_>)> <value:("=" <expr>)?> ";" <r:@R> => {
        StmtNode::Let(spanned2(l, r, LetNode{
            ident,
            mutable: m.is_some(),
            typ: Some(typ),
            value
        }))
    },
};

#[inline]
while_stmt: StmtNode<String> = {
    <l:@L> "while" <cond:expr> <expr:block> <r:@R> => {
        StmtNode::While(spanned2(l, r, WhileNode{
            cond,
            expr
        }))
    },
    <l:@L> "until" <cond:expr> <expr:block> <r:@R> => {
        StmtNode::Until(spanned2(l, r, WhileNode{
            cond,
            expr,
        }))
    }
};

#[inline]
for_stmt: StmtNode<String> = {
    <l:@L> "for" <value:identifier> "in" <iter:expr> <expr:block> <r:@R> => {
        StmtNode::For(spanned2(l, r, ForNode{
            value,
            iter,
            expr
        }))
    },
};

#[inline]
expr_stmt: StmtNode<String> = {
    block => StmtNode::Expr(<>, false),
    if_expr => StmtNode::Expr(<>, false),
    <ex:expr> ";" => {
        StmtNode::Expr(ex, true)
    },
};


//
// Expressions.
//

pub expr: SynExpr = {
    if_expr,
    or,
    block,
};

block: Expr<String> = {
    located<block_node> => spanned(<>.span, ExprNode::Block(<>.into_inner()))
};

#[inline]
block_node: Vec<Stmt<String>> = {
    "{" <stmts: many<stmt>> <ex: or?> "}" => {
        let mut stmts = stmts;

        if let Some(ex) = ex {
            stmts.push(spanned(ex.span, StmtNode::Expr(ex, false)));
        }

        stmts
    },
};

if_expr: Expr<String> = {
    located<if_> => spanned(<>.span, ExprNode::If(<>)),
    located<unless>,
};

#[inline]
if_: IfNode<String> = {
    "if" <cond:or> <expr:block> <else_expr:( "else" <either<block, if_expr>> )?> => {
        IfNode::If{
            cond: box cond,
            expr: box expr,
            else_expr: else_expr.map(|ex| box ex)
        }
    }
};

#[inline]
if_let: IfNode<String> = {
    "if" "let" <name: identifier> "=" <value:or> <expr:block> <else_expr: ("else" <either<block, if_expr>>)?> => {
        IfNode::IfLet{
            assign: box value,
            to: name,
            expr: box expr,
            else_expr: else_expr.map(|ex| box ex)
        }
    }
};


unless: ExprNode<String> = { located<unless_node> => ExprNode::Unless(<>) };

#[inline]
unless_node: IfNode<String> = {
    "unless" <cond: or> <expr: block> <else_expr: ("else" <either<block, if_expr>>)?> => {
        IfNode::If{
            cond: box cond,
            expr: box expr,
            else_expr: else_expr.map(|ex| box ex)
        }
    }
};

arith<op, next>: SynExpr = {
    <l:@L> <lhs: arith<op, next>> <op:op> <rhs:next> <r:@R> => {
        let lhs = box lhs;
        let rhs = box rhs;


        if let Token::Arith(op) = op {
            let oper = spanned2(l, r, OperNode{lhs, op, rhs});
            spanned2(l, r, ExprNode::Arith(oper))
        } else {
            unreachable!("Only Token::Logic should reach this macro.");
        }
    },
    next
};

logic<op, next>: SynExpr = {
    <l:@L> <lhs: logic<op, next>> <op: op> <rhs: next> <r:@R> => {
        let lhs = box lhs;
        let rhs = box rhs;

        if let Token::Logic(op) = op {
            let oper = spanned2(l, r, OperNode{lhs, op, rhs});
            let logic = spanned2(l, r, LogicNode::Oper(oper));
            spanned2(l, r, ExprNode::Logic(logic))
        } else {
            unreachable!("Only Token::Logic should reach this macro.");
        }
    },
    next
};

logic_single<op, next>: SynExpr = {
    <l:@L> <lhs: next> <op: op> <rhs: next> <r:@R> => {
        let lhs = box lhs;
        let rhs = box rhs;

        if let Token::Logic(op) = op {
            let oper = spanned2(l, r, OperNode{lhs, op, rhs});
            let logic = spanned2(l, r, LogicNode::Oper(oper));
            spanned2(l, r, ExprNode::Logic(logic))
        } else {
            unreachable!("Only Token::Logic should reach this macro.");
        }
    },
    next
};

or  = logic<"or", and>;
and = logic<"and", not>;

not: SynExpr = {
    <l:@L> <n:"not"> <c:comparisons> <r:@R> => {
        let not = spanned2(l, r, LogicNode::Not(box c));

        spanned2(l, r, ExprNode::Logic(not))
    },
    comparisons
};

desigualities = either<either<"<", ">">, either<"<=", ">=">>;
comparisons = logic_single<either<either<"==", "!=">, desigualities>, plus>;

plus  = arith<either<"plus", "minus">, mult>;
mult  = arith<either<"mult", "div">, shift>;
shift = arith<either<"lshift", "rshift">, pow>;
pow   = arith<either<"pow", "mod">, question>;

question: Expr<String> = {
    <l:@L> <f: factor> "?" <r:@R> => spanned2(l, r, ExprNode::Question(box f)),
    factor
};

factor = located<factor_node>;
factor_node: ExprNode<String> = {
    <l:@L> <func:identifier> "(" <args:comma<expr>?> ")" <r:@R> => {
        ExprNode::Call(spanned2(l, r, CallNode{func, args: args.unwrap_or_else(Vec::new)}))
    },
    term => ExprNode::Term(<>),
    "(" <expr> ")" => ExprNode::Parens(box <>)
};

term = located<term_node>;
term_node: TermNode<String> = {
    named,
    located<literal> => TermNode::Lit(<>),
};

named: TermNode<String> = {
    identifier => TermNode::Var(<>),
    <owner:factor> "." <field:identifier> => {
        let owner = box owner;
        TermNode::Field{owner, field}
    },
    <owner:factor> "[" <index:expr> "]" => {
        let owner = box owner;
        let index = box index;
        TermNode::Index{owner, index}
    },
};

literal: LitNode<String> = {
    booll   => LitNode::Bool(<>),
    charl   => LitNode::Char(<>),
    intl    => LitNode::Integer(<>),
    fltl    => LitNode::Float(<>),
    stringl => LitNode::String(<>),
    "[" <items:comma<(<expr> "=>" <expr>)>> "]" => LitNode::Map(<>),
    "[" <items:comma<expr>> "]" => {
        LitNode::Vec(<>)
    },
};

identifier: Located<String> = located<ident>;

