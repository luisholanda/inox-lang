use std::boxed::Box;
use symbol::pos::Location;

use crate::lexer::token::{Token, Delimiter};
use crate::cst::*;
use super::error::ParserError;


#[LALR]
grammar(errors: &mut Vec<ParserError>);

extern {
    type Error = &'static str;
    type Location = Location;

    enum Token {
        ident => Token::Identifier(<String>),
        doc   => Token::DocComment(<String>),

        // Literals
        stringl => Token::StringLiteral(<String>),
        charl   => Token::CharLiteral(<char>),
        intl    => Token::IntLiteral(<i32>),
        natl    => Token::NatLiteral(<u32>),
        fltl    => Token::FloatLiteral(<f32>),
        "self"  => Token::SelfLit,

        "plus"   => Token::Arith(ArithOp::Add),
        "minus"  => Token::Arith(ArithOp::Sub),
        "mult"   => Token::Arith(ArithOp::Mult),
        "div"    => Token::Arith(ArithOp::Div),
        "pow"    => Token::Arith(ArithOp::Pow),
        "mod"    => Token::Arith(ArithOp::Mod),
        "lshift" => Token::Arith(ArithOp::LShift),
        "rshift" => Token::Arith(ArithOp::RShift),

        "not" => Token::Logic(LogicOp::Not),
        "and" => Token::Logic(LogicOp::And),
        "or"  => Token::Logic(LogicOp::Or),
        "=="  => Token::Logic(LogicOp::DoubleEquals),
        "!="  => Token::Logic(LogicOp::NotEquals),
        "<"   => Token::Logic(LogicOp::LessThan),
        "<="  => Token::Logic(LogicOp::LessEquals),
        ">"   => Token::Logic(LogicOp::GreaterThan),
        ">="  => Token::Logic(LogicOp::GreaterEquals),

        // Types
        tyvar => Token::TypeVar(<String>),
        "data"   => Token::Data,
        "type"   => Token::Type,
        "new"    => Token::New,
        "struct" => Token::Struct,
        "impl"   => Token::Impl,
        "forall" => Token::Forall,

        // Control-flow
        "if"       => Token::If,
        "else"     => Token::Else,
        "unless"   => Token::Unless,
        "while"    => Token::While,
        "until"    => Token::Until,
        "for"      => Token::For,
        "in"       => Token::In,
        "loop"     => Token::Loop,
        "break"    => Token::Break,
        "continue" => Token::Continue,
        "return"   => Token::Return,

        // Extras
        "with"  => Token::With,
        "match" => Token::Match,
        "let"   => Token::Let,
        "mut"   => Token::Mut,

        // Punctuation
        ":"  => Token::Colon,
        "::" => Token::DoubleColon,
        ";"  => Token::SemiColon,
        "."  => Token::Dot,
        ","  => Token::Comma,
        "?"  => Token::Question,
        "->" => Token::RArrow,
        "=>" => Token::FatRArrow,
        "~>" => Token::SqdRArrow,
        "<-" => Token::LArrow,
        "="  => Token::Equals,
        "|"  => Token::Pipe,

        "{" => Token::Delim(Delimiter::LBrace),
        "[" => Token::Delim(Delimiter::LBracket),
        "(" => Token::Delim(Delimiter::LParen),
        "}" => Token::Delim(Delimiter::RBrace),
        "]" => Token::Delim(Delimiter::RBracket),
        ")" => Token::Delim(Delimiter::RParen),
    }
}

either<e1, e2> = { e1, e2 };

comma<e>: Vec<e> = {
    <es: (<e> ",")*> <e_new:e> => {
        let mut es = es;
        es.push(e_new);

        es
    },
};

many<e>: Vec<e> = {
    <es:many<e>> <e_new:e> => {
        let mut es = es;
        es.push(e_new);

        es
    },
     => vec![],
};

//
// Modules
//

pub module: Module<String> = {
    many<def> => Module{ definitions: <> }
};

//
// Top-level definitions
//

pub def: Def<String> = {
    func => Def::Func(<>),
    sign => Def::Sign(<>),
};

func: Func<String> = {
    <name:identifier> "(" <args:comma<identifier>?> ")" "=" <body:block> => {
        Func{
            name,
            args: args.unwrap_or_else(Vec::new),
            body,
        }
    },
    <name: identifier> "=" <body: block> => {
        Func{
            name,
            args: vec![],
            body,
        }
    }
};

sign: Sign<String> = {
    <name: identifier> ":" <type_: type_> => Sign{name, type_},
};

//
// Types
//

pub type_: Type<String> = { forall, unconstraint };

forall: Type<String> = {
    "forall" <vars: many<type_var>> <c:constraints?> "." <base: unconstraint> => {
        Type::Forall(Forall{
            vars,
            base: box base,
            constraint: c
        })
    },
};

constraints: Constraint<String> = {
    "with" <c:constraint> => c,
};

constraint: Constraint<String> = {
    single_constraint,
    "(" <comma<single_constraint>> ")" => Constraint::Parens(<>),
};

single_constraint: Constraint<String> = {
    <identifier> "[" <comma<base_type>> "]" => Constraint::Constraint(<>),
};

unconstraint = either<base_type, method>;

base_type: Type<String> = {
    arrow,
    type_term,
    "->" <r:base_type> => Type::Arrow(None, box <>),
};

arrow: Type<String> = {
    <p:type_term> "->" <r: base_type> => Type::Arrow(Some(box p), box r),
};

method: Type<String> = {
    <r:type_term> "~>" <ret:either<arrow, type_term>> => Type::Method(box Type::Arrow(Some(box r), box ret)),
};

type_term: Type<String> = {
    identifier => Type::Term(<>),
    type_var => Type::Var(<>),
    <typ: type_term> "[" <args: comma<base_type>> "]" => Type::App(box typ, args),
    "(" ")" => Type::Term("unit".to_owned()),
    "(" <unconstraint> ")" => Type::Parens(box <>)
};

type_var: String = {
    tyvar => <>
};

//
// Statements
//

pub stmt: Stmt<String> = {
    assign_stmt,
    while_stmt,
    for_stmt,
    let_stmt,
    expr_stmt,
};

#[inline]
assign_stmt: Stmt<String> = {
    <to:identifier> "=" <expr:expr> ";" => {
        Stmt::Assign(Assign{
            to,
            expr
        })
    }
};

#[inline]
let_stmt: Stmt<String> = {
    "let" <ident:identifier> <typ:(":" <type_>)?> <value:("=" <expr>)?> ";" => {
        Stmt::Let(Let{
            ident,
            typ,
            value
        })
    },
};

#[inline]
while_stmt: Stmt<String> = {
    "while" <cond:expr> <expr:block> => {
        Stmt::While(While{
            cond,
            expr
        })
    },
    "until" <cond:expr> <expr:block> => {
        Stmt::Until(While{
            cond,
            expr,
        })
    }
};

#[inline]
for_stmt: Stmt<String> = {
    "for" <value:identifier> "in" <iter:expr> <expr:block> => {
        Stmt::For(For{
            value,
            iter,
            expr
        })
    },
};

#[inline]
expr_stmt: Stmt<String> = {
    <ex:expr> ";" => {
        Stmt::Expr(ex, true)
    },
    block => Stmt::Expr(<>, false),
    if_expr => Stmt::Expr(<>, false)
};


//
// Expressions.
//

pub expr: SynExpr = {
    if_expr,
    or,
    block,
};

block: SynExpr = {
    "{" <stmts: many<stmt>> <ex: or?> "}" => {
        let mut stmts = stmts;

        if let Some(ex) = ex {
            stmts.push(Stmt::Expr(ex, false));
        }

        Expr::Block(stmts)
    },
};

if_expr: SynExpr = {
    if_ => Expr::If(<>),
    unless,
};

#[inline]
if_: IfExpr<String> = {
    "if" <cond:or> <expr:block> <else_expr:( "else" <block> )?> => {
        IfExpr::If{
            cond: box cond,
            expr: box expr,
            else_expr: else_expr.map(|ex| box ex)
        }
    }
};

#[inline]
if_let: IfExpr<String> = {
    "if" "let" <name: identifier> "=" <value:or> <expr:block> <else_expr: ("else" <block>)?> => {
        IfExpr::IfLet{
            assign: box value,
            to: name,
            expr: box expr,
            else_expr: else_expr.map(|ex| box ex)
        }
    }
};

#[inline]
unless: SynExpr = {
    "unless" <cond: or> <expr: block> <else_expr: ("else" <block>)?> => {
        Expr::Unless(IfExpr::If{
            cond: box cond,
            expr: box expr,
            else_expr: else_expr.map(|ex| box ex)
        })
    }
};

arith<op, next>: SynExpr = {
    <lhs: arith<op, next>> <op:op> <rhs:next> => {
        let lhs = box lhs;
        let rhs = box rhs;


        if let Token::Arith(op) = op {
            Expr::Arith(Oper{lhs, op, rhs})
        } else {
            unreachable!("Only Token::Logic should reach this macro.");
        }
    },
    next
};

logic<op, next>: SynExpr = {
    <lhs: logic<op, next>> <op: op> <rhs: next> => {
        let lhs = box lhs;
        let rhs = box rhs;

        if let Token::Logic(op) = op {
            Expr::Logic(Logic::Oper(Oper{lhs, op, rhs}))
        } else {
            unreachable!("Only Token::Logic should reach this macro.");
        }
    },
    next
};


or  = logic<"or", and>;
and = logic<"and", not>;

not: SynExpr = {
    <n:"not"> <l:comparisons> => Expr::Logic(Logic::Not(box l)),
    comparisons
};

desigualities = either<either<"<", ">">, either<"<=", ">=">>;
comparisons = logic<either<either<"==", "!=">, desigualities>, plus>;

plus  = arith<either<"plus", "minus">, mult>;
mult  = arith<either<"mult", "div">, shift>;
shift = arith<either<"lshift", "rshift">, pow>;
pow   = arith<either<"pow", "mod">, question>;

question: SynExpr = {
    <f: factor> "?" => Expr::Question(box f),
    factor
};

factor: SynExpr = {
    <f:factor> "(" <args:comma<expr>?> ")" => {
        let func = box f;

        Expr::Call(Call{func, args: args.unwrap_or_else(Vec::new)})
    },
    term => Expr::Term(<>),
    "(" <expr> ")" => Expr::Parens(box <>)
};

term: Term<String> = {
    identifier => Term::Var(<>),
    literal => Term::Lit(<>),
    <owner:factor> "." <field:identifier> => {
        let owner = box owner;
        Term::Field{owner, field}
    },
    <owner:factor> "[" <index:expr> "]" => {
        let owner = box owner;
        let index = box index;
        Term::Index{owner, index}
    },
};

literal: Literal<String> = {
    charl   => Literal::Char(<>),
    intl    => Literal::Integer(<>),
    fltl    => Literal::Float(<>),
    natl    => Literal::Natural(<>),
    stringl => Literal::String(<>),
    "[" <items:comma<(<expr> "=>" <expr>)>> "]" => Literal::Map(<>),
    "[" <items:comma<expr>?> "]" => {
        Literal::Vec(<>.unwrap_or_else(Vec::new))
    },
};

identifier: String = {
    ident => <>
};

