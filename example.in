reduce: vec[int] -> int -> float
reduce(as, st) = {
  let mut result: int = st;

  for a in as {
    result = result + a;
  }

  result
}

join: string -> vec[string] -> string
join(sep, ss) = {
  let mut result: string = "";

  for s in ss {
    result = concat(result, s);
    result = concat(result, sep);
  }

  result
}

main: -> ()
main = {
  let mut vec_test: vec[string] = [1, 2];

  let reduce: float = reduce(vec_test);
  print(append(show(reduce), '\n'));

  vec_test[3] = 4;
  print(show(vec_test));

  let map_test: map[string, string] = [
    "a" => read()
  ];

  for t in map_test {
    let strings: vec[string] = [t, ":", map_test[t], "\n"];
    print(join(strings, " "));
  }
}
